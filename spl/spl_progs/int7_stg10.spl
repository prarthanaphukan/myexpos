// Setting MODE flag to 5 which is syscall for write
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 9] = 5;

// Storing value of SP in a register
alias userSP R0;
userSP = SP;

// Switching from user to kernel stack
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11] * 512 - 1;

alias physicalPageNo R1;
alias offset R2;
alias fileDescPhysAddr R3;

physicalPageNo = [PTBR + 2 * ((userSP - 4)/512)];   // Arg 1 contains file descriptor's LA
offset = (userSP - 4) % 512;
fileDescPhysAddr = (physicalPageNo * 512) + offset;

alias fileDesc R4;
fileDesc = [fileDescPhysAddr];

if (fileDesc != -2)
then
      alias retValPhysAddr R5;
      retValPhysAddr = ([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512);
      [retValPhysAddr] = -1;
else
      alias word R5;
      word = [[PTBR + 2 * ((userSP - 3)/512)] * 512 + ((userSP - 3) % 512)];
      print word;

      alias retValPhysAddr R6;
      retValPhysAddr = ([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512);
      [retValPhysAddr] = 0;
endif;

// Transferring control to user program
SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;   // MODE flag to 0
ireturn;